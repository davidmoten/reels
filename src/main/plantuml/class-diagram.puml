@startuml
interface "Actor<T>" as Actor_T_ [[java:com.github.davidmoten.reels.Actor]] {
    onMessage(message: Message<T>): void
    preStart(self: ActorRef<T>): void
    onStop(self: ActorRef<T>): void
}
interface "ActorRef<T>" as ActorRef_T_ [[java:com.github.davidmoten.reels.ActorRef]] {
    tell(message: T): void
    tell(message: T, sender: ActorRef<?>): void
    ask(message: T): CompletableFuture<S>
    stop(): void
    name(): String
    parent(): ActorRef<S>
    child(name: String): ActorRef<S>
    children(): Collection<ActorRef<S>>
    recast(): ActorRef<S>
    narrow(): ActorRef<S>
}
Context --> "creates\n*" ActorRef_T_
ActorRef_T_ --> "1" Scheduler : scheduler
Disposable <|-- ActorRef_T_
class Context [[java:com.github.davidmoten.reels.Context]] {
    +createActor(...): ActorRef<T>
    +lookupActor(name: String): Optional<ActorRef<T>>
    +dispose(): void
    +isDisposed(): boolean
    +shutdownNow(): void
    +shutdownGracefully(): CompletableFuture<Void>
    +actorBuilder(): ActorBuilder<T>
}
Context --> "1" Supervisor : defaultSupervisor
Context --> "1" Scheduler : defaultScheduler
Context --> "1" ActorRef_T_ : deadLetterActor
Disposable <|.. Context

interface Disposable [[java:com.github.davidmoten.reels.Disposable]] {
    dispose(): void
    isDisposed(): boolean
}
class "Message<T>" as Message_T_ [[java:com.github.davidmoten.reels.Message]] {
    +content(): T
    +self(): ActorRef<T>
    +recipient(): ActorRef<T>
    +sender(): Optional<ActorRef<S>>
    +senderRaw(): ActorRef<S>
    +toString(): String
}
Message_T_ --> "1" Context
interface Scheduler [[java:com.github.davidmoten.reels.Scheduler]] {
    schedule(run: Runnable): Disposable
    schedule(run: Runnable, delay: long, unit: TimeUnit): Disposable
    schedulePeriodically(run: Runnable, initialDelay: long, period: long, unit: TimeUnit): Disposable
    shutdown(): void
    requiresSerialization(): boolean
}
Scheduler --> "*" Worker : creates

interface "SupervisedActorRef<T>" as SupervisedActorRef_T_ [[java:com.github.davidmoten.reels.SupervisedActorRef]] {
    restart(): boolean
    pauseAndRestart(delay: long, unit: TimeUnit): boolean
    pause(duration: long, unit: TimeUnit): boolean
    retry(): void
}
ActorRef_T_ <|-- SupervisedActorRef_T_

interface Supervisor [[java:com.github.davidmoten.reels.Supervisor]] {
    processFailure(message: Message<?>, self: SupervisedActorRef<?>, error: Throwable): void
}
interface Worker [[java:com.github.davidmoten.reels.Worker]] {
    schedule(run: Runnable): Disposable
    schedule(run: Runnable, delay: long, unit: TimeUnit): Disposable
    schedulePeriodically(run: Runnable, initialDelay: long, period: long, unit: TimeUnit): Disposable
}
Disposable <|-- Worker
Actor_T_ --> "processes\n*" Message_T_
ActorRef_T_ --> "refers to\n1" Actor_T_
@enduml